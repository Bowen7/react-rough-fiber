diff --git a/lib/parser.js b/lib/parser.js
index 1aeffdacf2c2abec5c1942b22a7f63e898232db0..409cfd7c29d14547f0d03da8d6935ede22623665 100644
--- a/lib/parser.js
+++ b/lib/parser.js
@@ -1,87 +1,187 @@
-const COMMAND = 0;
-const NUMBER = 1;
-const EOD = 2;
 const PARAMS = { A: 7, a: 7, C: 6, c: 6, H: 1, h: 1, L: 2, l: 2, M: 2, m: 2, Q: 4, q: 4, S: 4, s: 4, T: 2, t: 2, V: 1, v: 1, Z: 0, z: 0 };
-function tokenize(d) {
-    const tokens = new Array();
-    while (d !== '') {
-        if (d.match(/^([ \t\r\n,]+)/)) {
-            d = d.substr(RegExp.$1.length);
+
+const isWsp = (c) => {
+    const codePoint = c.codePointAt(0);
+    return (
+        codePoint === 0x20 ||
+        codePoint === 0x9 ||
+        codePoint === 0xd ||
+        codePoint === 0xa
+    );
+};
+
+const isDigit = (c) => {
+    const codePoint = c.codePointAt(0);
+    if (codePoint === null || codePoint === undefined) {
+        return false;
+    }
+    return 48 <= codePoint && codePoint <= 57;
+};
+
+const readNumber = (string, cursor) => {
+    let i = cursor;
+    let value = '';
+    let state = 'none';
+    for (; i < string.length; i += 1) {
+      const c = string[i];
+      if (c === '+' || c === '-') {
+        if (state === 'none') {
+          state = 'sign';
+          value += c;
+          continue;
+        }
+        if (state === 'e') {
+          state = 'exponent_sign';
+          value += c;
+          continue;
+        }
+      }
+      if (isDigit(c)) {
+        if (state === 'none' || state === 'sign' || state === 'whole') {
+          state = 'whole';
+          value += c;
+          continue;
         }
-        else if (d.match(/^([aAcChHlLmMqQsStTvVzZ])/)) {
-            tokens[tokens.length] = { type: COMMAND, text: RegExp.$1 };
-            d = d.substr(RegExp.$1.length);
+        if (state === 'decimal_point' || state === 'decimal') {
+          state = 'decimal';
+          value += c;
+          continue;
         }
-        else if (d.match(/^(([-+]?[0-9]+(\.[0-9]*)?|[-+]?\.[0-9]+)([eE][-+]?[0-9]+)?)/)) {
-            tokens[tokens.length] = { type: NUMBER, text: `${parseFloat(RegExp.$1)}` };
-            d = d.substr(RegExp.$1.length);
+        if (state === 'e' || state === 'exponent_sign' || state === 'exponent') {
+          state = 'exponent';
+          value += c;
+          continue;
         }
-        else {
-            return [];
+      }
+      if (c === '.') {
+        if (state === 'none' || state === 'sign' || state === 'whole') {
+          state = 'decimal_point';
+          value += c;
+          continue;
         }
+      }
+      if (c === 'E' || c === 'e') {
+        if (
+          state === 'whole' ||
+          state === 'decimal_point' ||
+          state === 'decimal'
+        ) {
+          state = 'e';
+          value += c;
+          continue;
+        }
+      }
+      break;
     }
-    tokens[tokens.length] = { type: EOD, text: '' };
-    return tokens;
-}
-function isType(token, type) {
-    return token.type === type;
-}
+    const number = Number.parseFloat(value);
+    if (Number.isNaN(number)) {
+      return [cursor, null];
+    } else {
+      // step back to delegate iteration to parent loop
+      return [i - 1, number];
+    }
+};
+  
+const isKey = (c) => {
+    return c in PARAMS;
+};
+
 export function parsePath(d) {
-    const segments = [];
-    const tokens = tokenize(d);
-    let mode = 'BOD';
-    let index = 0;
-    let token = tokens[index];
-    while (!isType(token, EOD)) {
-        let paramsCount = 0;
-        const params = [];
-        if (mode === 'BOD') {
-            if (token.text === 'M' || token.text === 'm') {
-                index++;
-                paramsCount = PARAMS[token.text];
-                mode = token.text;
-            }
-            else {
-                return parsePath('M0,0' + d);
+    const pathData = [];
+    let key = null;
+    let data = [];
+    let argsCount = 0;
+    let canHaveComma = false;
+    let hadComma = false;
+    for (let i = 0; i < d.length; i += 1) {
+        const c = d.charAt(i);
+        if (isWsp(c)) {
+            continue;
+        }
+        // allow comma only between arguments
+        if (canHaveComma && c === ',') {
+            if (hadComma) {
+            break;
             }
+            hadComma = true;
+            continue;
         }
-        else if (isType(token, NUMBER)) {
-            paramsCount = PARAMS[mode];
+        if (isKey(c)) {
+            if (hadComma) {
+                return pathData;
+            }
+            if (key === null || key === undefined) {
+                // moveto should be leading key
+                if (c !== 'M' && c !== 'm') {
+                    return pathData;
+                }
+            } else {
+                // stop if previous key arguments are not flushed
+                if (data.length !== 0) {
+                    return pathData;
+                }
+            }
+            key = c;
+            data = [];
+            argsCount = PARAMS[key];
+            canHaveComma = false;
+            // flush key without arguments
+            if (argsCount === 0) {
+                pathData.push({ key, data });
+            }
+            continue;
         }
-        else {
-            index++;
-            paramsCount = PARAMS[token.text];
-            mode = token.text;
+        // avoid parsing arguments if no key detected
+        if (key === null || key === undefined) {
+            return pathData;
         }
-        if ((index + paramsCount) < tokens.length) {
-            for (let i = index; i < index + paramsCount; i++) {
-                const numbeToken = tokens[i];
-                if (isType(numbeToken, NUMBER)) {
-                    params[params.length] = +numbeToken.text;
-                }
-                else {
-                    throw new Error('Param not a number: ' + mode + ',' + numbeToken.text);
+        // read next argument
+        let newCursor = i;
+        let number = null;
+        if (key === 'A' || key === 'a') {
+            const position = data.length;
+            if (position === 0 || position === 1) {
+                // allow only positive number without sign as first two arguments
+                if (c !== '+' && c !== '-') {
+                    [newCursor, number] = readNumber(d, i);
                 }
             }
-            if (typeof PARAMS[mode] === 'number') {
-                const segment = { key: mode, data: params };
-                segments.push(segment);
-                index += paramsCount;
-                token = tokens[index];
-                if (mode === 'M')
-                    mode = 'L';
-                if (mode === 'm')
-                    mode = 'l';
+            if (position === 2 || position === 5 || position === 6) {
+                [newCursor, number] = readNumber(d, i);
             }
-            else {
-                throw new Error('Bad segment: ' + mode);
+            if (position === 3 || position === 4) {
+                // read flags
+                if (c === '0') {
+                    number = 0;
+                }
+                if (c === '1') {
+                    number = 1;
+                }
             }
+        } else {
+            [newCursor, number] = readNumber(d, i);
+        }
+        if (number === null || number === undefined) {
+            return pathData;
         }
-        else {
-            throw new Error('Path data ended short');
+        data.push(number);
+        canHaveComma = true;
+        hadComma = false;
+        i = newCursor;
+        // flush arguments when necessary count is reached
+        if (data.length === argsCount) {
+            pathData.push({ key, data });
+            // subsequent moveto coordinates are threated as implicit lineto commands
+            if (key === 'M') {
+                key = 'L';
+            }
+            if (key === 'm') {
+                key = 'l';
+            }
+            data = [];
         }
     }
-    return segments;
+    return pathData;
 }
 export function serialize(segments) {
     const tokens = [];